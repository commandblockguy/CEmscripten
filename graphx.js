mergeInto(LibraryManager.library, {
    graphx: null,
    gfx_Begin: function() {
        class Graphx {
            constructor() {
                this.width = 320;
                this.height = 240;

                this.palette_ptr = ccall('graphx_get_palette', 'number', []);
                this.vram_ptr = ccall('graphx_get_vram', 'number', []);

                this.canvas = document.getElementById('canvas');
                this.canvas.setAttribute('width', this.width);
                this.canvas.setAttribute('height', this.height);

                //this.int_canvas = document.createElement('canvas');
                //this.int_canvas.style.display = 'none';
                //this.int_canvas.setAttribute('width', this.width);
                //this.int_canvas.setAttribute('height', this.height);
                //document.body.appendChild(this.int_canvas);

                //this.ctx = this.int_canvas.getContext('2d');
                //this.ctx.fillstyle = '#000000ff';
                //this.ctx.fillRect(0, 0, this.width, this.height);

                this.display_buffer = 0;
                this.draw_buffer = 'screen';

                this.color = 0;
                this.transparent_color = 0;
                this.text_fg_color = 255;
                this.text_bg_color = 0;
                this.text_transparent_color = 0;
                this.text_x = 0;
                this.text_y = 0;

                //for(let x = 0; x < 320; x++) {
                //    //temp
                //    for(let y = 0; y < 80; y++) {
                //        var color = Math.floor(x / 10) + 32 * Math.floor(y / 10);
                //        setValue(this.vram_ptr + x + this.width * y, color, 'i8');
                //    }
                //}

                //this.vram_to_int_canvas();

                this.refresh_interval = setInterval(() => {this.update_screen()}, 1000 / 60);
                this.update_screen();

                this.spacings = [
                    8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8,
                    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
                    3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8,
                    8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7,
                    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
                    8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8,
                    4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8,
                    8,8,8,8,7,8,8,8,8,8,8,7,3,7,8,8,
                    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
                    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
                ];
                this.font = new Uint8Array([
                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // .
                    0x7E,0x81,0xA5,0x81,0xBD,0xBD,0x81,0x7E, // .
                    0x7E,0xFF,0xDB,0xFF,0xC3,0xC3,0xFF,0x7E, // .
                    0x6C,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00, // .
                    0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00, // .
                    0x38,0x7C,0x38,0xFE,0xFE,0x10,0x10,0x7C, // .
                    0x00,0x18,0x3C,0x7E,0xFF,0x7E,0x18,0x7E, // .
                    0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00, // .
                    0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF, // .
                    0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00, // .
                    0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF, // .
                    0x0F,0x07,0x0F,0x7D,0xCC,0xCC,0xCC,0x78, // .
                    0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18, // .
                    0x3F,0x33,0x3F,0x30,0x30,0x70,0xF0,0xE0, // .
                    0x7F,0x63,0x7F,0x63,0x63,0x67,0xE6,0xC0, // .
                    0x99,0x5A,0x3C,0xE7,0xE7,0x3C,0x5A,0x99, // .
                    0x80,0xE0,0xF8,0xFE,0xF8,0xE0,0x80,0x00, // .
                    0x02,0x0E,0x3E,0xFE,0x3E,0x0E,0x02,0x00, // .
                    0x18,0x3C,0x7E,0x18,0x18,0x7E,0x3C,0x18, // .
                    0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x00, // .
                    0x7F,0xDB,0xDB,0x7B,0x1B,0x1B,0x1B,0x00, // .
                    0x3F,0x60,0x7C,0x66,0x66,0x3E,0x06,0xFC, // .
                    0x00,0x00,0x00,0x00,0x7E,0x7E,0x7E,0x00, // .
                    0x18,0x3C,0x7E,0x18,0x7E,0x3C,0x18,0xFF, // .
                    0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x00, // .
                    0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00, // .
                    0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00, // .
                    0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00, // .
                    0x00,0x00,0xC0,0xC0,0xC0,0xFE,0x00,0x00, // .
                    0x00,0x24,0x66,0xFF,0x66,0x24,0x00,0x00, // .
                    0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x00,0x00, // .
                    0x00,0xFF,0xFF,0x7E,0x3C,0x18,0x00,0x00, // .
                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, //
                    0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0xC0,0x00, // !
                    0xD8,0xD8,0xD8,0x00,0x00,0x00,0x00,0x00, // "
                    0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00, // #
                    0x18,0x7E,0xC0,0x7C,0x06,0xFC,0x18,0x00, // $
                    0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00, // %
                    0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00, // &
                    0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00, // '
                    0x30,0x60,0xC0,0xC0,0xC0,0x60,0x30,0x00, // (
                    0xC0,0x60,0x30,0x30,0x30,0x60,0xC0,0x00, // )
                    0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00, // *
                    0x00,0x30,0x30,0xFC,0xFC,0x30,0x30,0x00, // +
                    0x00,0x00,0x00,0x00,0x00,0x60,0x60,0xC0, // ,
                    0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00, // -
                    0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00, // .
                    0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00, // /
                    0x7C,0xCE,0xDE,0xF6,0xE6,0xC6,0x7C,0x00, // 0
                    0x30,0x70,0x30,0x30,0x30,0x30,0xFC,0x00, // 1
                    0x7C,0xC6,0x06,0x7C,0xC0,0xC0,0xFE,0x00, // 2
                    0xFC,0x06,0x06,0x3C,0x06,0x06,0xFC,0x00, // 3
                    0x0C,0xCC,0xCC,0xCC,0xFE,0x0C,0x0C,0x00, // 4
                    0xFE,0xC0,0xFC,0x06,0x06,0xC6,0x7C,0x00, // 5
                    0x7C,0xC0,0xC0,0xFC,0xC6,0xC6,0x7C,0x00, // 6
                    0xFE,0x06,0x06,0x0C,0x18,0x30,0x30,0x00, // 7
                    0x7C,0xC6,0xC6,0x7C,0xC6,0xC6,0x7C,0x00, // 8
                    0x7C,0xC6,0xC6,0x7E,0x06,0x06,0x7C,0x00, // 9
                    0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00, // :
                    0x00,0x60,0x60,0x00,0x00,0x60,0x60,0xC0, // ;
                    0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x00, // <
                    0x00,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00, // =
                    0xC0,0x60,0x30,0x18,0x30,0x60,0xC0,0x00, // >
                    0x78,0xCC,0x18,0x30,0x30,0x00,0x30,0x00, // ?
                    0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x7E,0x00, // @
                    0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0x00, // A
                    0xFC,0xC6,0xC6,0xFC,0xC6,0xC6,0xFC,0x00, // B
                    0x7C,0xC6,0xC0,0xC0,0xC0,0xC6,0x7C,0x00, // C
                    0xF8,0xCC,0xC6,0xC6,0xC6,0xCC,0xF8,0x00, // D
                    0xFE,0xC0,0xC0,0xF8,0xC0,0xC0,0xFE,0x00, // E
                    0xFE,0xC0,0xC0,0xF8,0xC0,0xC0,0xC0,0x00, // F
                    0x7C,0xC6,0xC0,0xC0,0xCE,0xC6,0x7C,0x00, // G
                    0xC6,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00, // H
                    0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00, // I
                    0x06,0x06,0x06,0x06,0x06,0xC6,0x7C,0x00, // J
                    0xC6,0xCC,0xD8,0xF0,0xD8,0xCC,0xC6,0x00, // K
                    0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xFE,0x00, // L
                    0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00, // M
                    0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00, // N
                    0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00, // O
                    0xFC,0xC6,0xC6,0xFC,0xC0,0xC0,0xC0,0x00, // P
                    0x7C,0xC6,0xC6,0xC6,0xD6,0xDE,0x7C,0x06, // Q
                    0xFC,0xC6,0xC6,0xFC,0xD8,0xCC,0xC6,0x00, // R
                    0x7C,0xC6,0xC0,0x7C,0x06,0xC6,0x7C,0x00, // S
                    0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x00, // T
                    0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xFE,0x00, // U
                    0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x38,0x00, // V
                    0xC6,0xC6,0xC6,0xC6,0xD6,0xFE,0x6C,0x00, // W
                    0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6,0x00, // X
                    0xC6,0xC6,0xC6,0x7C,0x18,0x30,0xE0,0x00, // Y
                    0xFE,0x06,0x0C,0x18,0x30,0x60,0xFE,0x00, // Z
                    0xF0,0xC0,0xC0,0xC0,0xC0,0xC0,0xF0,0x00, // [
                    0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00, // \ 
                    0xF0,0x30,0x30,0x30,0x30,0x30,0xF0,0x00, // ]
                    0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00, // ^
                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF, // _
                    0xC0,0xC0,0x60,0x00,0x00,0x00,0x00,0x00, // `
                    0x00,0x00,0x7C,0x06,0x7E,0xC6,0x7E,0x00, // a
                    0xC0,0xC0,0xC0,0xFC,0xC6,0xC6,0xFC,0x00, // b
                    0x00,0x00,0x7C,0xC6,0xC0,0xC6,0x7C,0x00, // c
                    0x06,0x06,0x06,0x7E,0xC6,0xC6,0x7E,0x00, // d
                    0x00,0x00,0x7C,0xC6,0xFE,0xC0,0x7C,0x00, // e
                    0x1C,0x36,0x30,0x78,0x30,0x30,0x78,0x00, // f
                    0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0xFC, // g
                    0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6,0x00, // h
                    0x60,0x00,0xE0,0x60,0x60,0x60,0xF0,0x00, // i
                    0x06,0x00,0x06,0x06,0x06,0x06,0xC6,0x7C, // j
                    0xC0,0xC0,0xCC,0xD8,0xF8,0xCC,0xC6,0x00, // k
                    0xE0,0x60,0x60,0x60,0x60,0x60,0xF0,0x00, // l
                    0x00,0x00,0xCC,0xFE,0xFE,0xD6,0xD6,0x00, // m
                    0x00,0x00,0xFC,0xC6,0xC6,0xC6,0xC6,0x00, // n
                    0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0x00, // o
                    0x00,0x00,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0, // p
                    0x00,0x00,0x7E,0xC6,0xC6,0x7E,0x06,0x06, // q
                    0x00,0x00,0xFC,0xC6,0xC0,0xC0,0xC0,0x00, // r
                    0x00,0x00,0x7E,0xC0,0x7C,0x06,0xFC,0x00, // s
                    0x30,0x30,0xFC,0x30,0x30,0x30,0x1C,0x00, // t
                    0x00,0x00,0xC6,0xC6,0xC6,0xC6,0x7E,0x00, // u
                    0x00,0x00,0xC6,0xC6,0xC6,0x7C,0x38,0x00, // v
                    0x00,0x00,0xC6,0xC6,0xD6,0xFE,0x6C,0x00, // w
                    0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00, // x
                    0x00,0x00,0xC6,0xC6,0xC6,0x7E,0x06,0xFC, // y
                    0x00,0x00,0xFE,0x0C,0x38,0x60,0xFE,0x00, // z
                    0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C,0x00, // {
                    0xC0,0xC0,0xC0,0x00,0xC0,0xC0,0xC0,0x00, // |
                    0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0,0x00, // }
                    0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00, // ~
                    0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00, // .
                ]);
            }

            static rgb1555_to_rgb(rgb1555) {
                const r5 = (rgb1555 >> 10) & 31;
                const g6 = ((rgb1555 >> 4) & 62) | (rgb1555 >> 15);
                const b5 = rgb1555 & 31;
                return new Uint8Array([
                    Math.floor(r5 * 255.0 / 31),
                    Math.floor(g6 * 255.0 / 63),
                    Math.floor(b5 * 255.0 / 31),
                    255
                ]);
            }

            get current_draw_buf_ptr() {
                let offset = 0;
                if(this.draw_buffer == 'screen') offset = this.display_buffer * this.width * this.height;
                else offset = (1 - this.display_buffer) * this.width * this.height;
                return this.vram_ptr + offset;
            }

            get current_disp_buf_ptr() {
                return this.vram_ptr + this.display_buffer * this.width * this.height;
            }

            get back_disp_buf_ptr() {
                return this.vram_ptr + (1 - this.display_buffer) * this.width * this.height;
            }

            //vram_to_int_canvas() {
            //    var imagedata = this.ctx.createImageData(this.width, this.height);
            //    var vram = new Uint8Array(HEAPU8.subarray(this.current_draw_buf_ptr, this.current_draw_buf_ptr + this.width * this.height));
            //    for(let i = 0; i < this.width * this.height; i++) {
            //        imagedata.data[i * 4] = vram[i];
            //        imagedata.data[i * 4 + 3] = 255; // alpha
            //    }
            //    this.ctx.putImageData(imagedata, 0, 0);
            //}

            //int_canvas_to_vram() {
            //    var imagedata = this.ctx.getImageData(0, 0, this.width, this.height);
            //    var vram = new Uint8Array(this.width * this.height);
            //    for(let i = 0; i < this.width * this.height; i++) {
            //        vram[i] = imagedata.data[i * 4];
            //    }
            //    HEAPU8.set(vram, this.current_draw_buf_ptr);
            //}

            update_screen() {
                //console.log('updating screen');
                let ctx = this.canvas.getContext('2d');
                var imagedata = ctx.createImageData(this.width, this.height);
                var vram = new Uint8Array(HEAPU8.subarray(this.current_disp_buf_ptr, this.current_disp_buf_ptr + this.width * this.height));
                var palette = [];
                for(let i = 0; i < 256; i++) {
                    let rgb1555 = getValue(this.palette_ptr + 2*i, 'i16');
                    if(rgb1555 < 0) rgb1555 = 0x10000 + rgb1555;
                    palette[i] = Graphx.rgb1555_to_rgb(rgb1555);
                }
                for(let i = 0; i < this.width * this.height; i++) {
                    imagedata.data.set(palette[vram[i]], i * 4);
                }
                ctx.putImageData(imagedata, 0, 0);
            }

            set_pixel(x, y, index) {
                if(x > 0 && x < this.width && y > 0 && y < this.width) {
                    setValue(this.current_draw_buf_ptr + x + this.width * y, index, 'i8');
                }
            }

            print_char(char) {
                let width = this.spacings[char];
                for(let y = 0; y < 8; y++) {
                    let row = this.font[char * 8 + y];
                    for(let x = 0; x < width; x++) {
                        if(row & (1 << (7 - x))) this.set_pixel(this.text_x + x, this.text_y + y, this.text_fg_color);
                    }
                }
                this.text_x += width;
            }

            print_string(str) {
                [...str.toString()].forEach((c) => this.print_char(c.charCodeAt(0)));
            }
        }
        graphx = new Graphx();
    },
    gfx_End: function() {
        clearInterval(graphx.refresh_interval);
    },
    gfx_SetDraw: function(location) {
        if(location == 0) {
            graphx.draw_buffer = 'screen';
        } else {
            graphx.draw_buffer = 'buffer';
        }
    },
    gfx_SetColor: function(index) {
        graphx.color = index;
    },
    gfx_SetTextFGColor: function(index) {
        graphx.text_fg_color = index;
    },
    gfx_SetTextXY: function(x, y) {
        graphx.text_x = x;
        graphx.text_y = y;
    },
    gfx_PrintString: function(str) {
        graphx.print_string(UTF8ToString(str));
    },
    gfx_PrintStringXY: function(str, x, y) {
        graphx.text_x = x;
        graphx.text_y = y;
        graphx.print_string(UTF8ToString(str));
    },
    gfx_PrintUInt: function(n, len) {
        graphx.print_string(n);
    },

    gfx_GetVBuffer: function() {
        return graphx.current_draw_buf_ptr;
    },
    gfx_GetFBuffer: function() {
        return graphx.current_disp_buf_ptr;
    },
    gfx_GetBBuffer: function() {
        return graphx.back_disp_buf_ptr;
    },
    gfx_GetColor: function() {
        return graphx.color;
    },
    gfx_GetTransparentColor: function() {
        return graphx.transparent_color;
    }
});
